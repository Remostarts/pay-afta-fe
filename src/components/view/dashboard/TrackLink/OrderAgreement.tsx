'use client';

import React, { useState } from 'react';
import { Download } from 'lucide-react';

import PaymentSuccessful from '../shared/PaymentSuccessful';

import { ReButton } from '@/components/re-ui/ReButton';
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Checkbox } from '@/components/ui/checkbox';
import { UserRole } from './TransactionsSummaryForProduct';
import { OrderDetails } from '@/types/order';
import { UpdateOrderProgressDTO } from '@/lib/validations/order';
import { updateOrderProgress } from '@/lib/actions/order/order.actions';
import { toast } from 'sonner';

interface OrderAgreementProps {
  handleCurrentStepChange: (step: number) => void;
  currentStepChange: number;
  showActions?: boolean;
  userRole: UserRole;
  order?: OrderDetails | null;
  loadOrder?: () => Promise<void>;
}

export default function OrderAgreement({
  handleCurrentStepChange,
  currentStepChange,
  showActions = false,
  userRole,
  order,
  loadOrder,
}: OrderAgreementProps) {
  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [isAgreed, setIsAgreed] = useState(false);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [localLoading, setLocalLoading] = useState(false);

  const handleAcceptOrder = () => {
    console.log('ðŸŒ¼ ðŸ”¥ðŸ”¥ handleAcceptOrder ðŸ”¥ðŸ”¥ handleAcceptOrderðŸŒ¼');
    // setIsOpen(true);
  };

  const handleConfirmTransaction = async () => {
    if (userRole !== 'buyer') toast.error('Only buyer can accept agreement!');
    setLocalLoading(true);
    try {
      const response = await updateOrderProgress(
        {
          status: 'AGREEMENT',
          step: 1,
          notes: 'Agreement signed',
        } as UpdateOrderProgressDTO,
        order?.id as string
      );
      console.log('ðŸŒ¼ ðŸ”¥ðŸ”¥ loadOrder ðŸ”¥ðŸ”¥ responseðŸŒ¼', response);
      if (response?.success) {
        if (loadOrder) {
        }
        setIsOpen(false);
      } else {
        toast.error(response?.error || 'Failed to update order progress history');
      }
    } catch (error) {
      toast.error(
        error instanceof Error ? error.message : 'Failed to update order progress history'
      );
    } finally {
      setLocalLoading(false);
    }

    // handleCurrentStepChange(2);
  };

  const handleRejectOrder = () => {
    // Add rejection logic here
    console.log('Order rejected');
    handleCurrentStepChange(currentStepChange - 1);
  };

  const handleDownload = () => {
    // Handle PDF download logic here
    console.log('Downloading escrow agreement PDF');
  };

  const handleAccept = () => {
    if (isAgreed) {
      setShowConfirmDialog(true);
    }
  };

  const handleReject = () => {
    console.log('Order rejected');
  };

  const handleCancelConfirmation = () => {
    setShowConfirmDialog(false);
  };

  if (userRole === 'seller' && order?.status === 'PENDING') {
    return (
      <div className="mt-5 rounded-xl border-2 border-gray-200 bg-[#eeeeee] p-5">
        <h2 className="mb-2 text-lg font-medium font-inter">Awaiting Approval</h2>
        <p className="text-sm text-gray-600 font-inter">
          Pending confirmation from buyer/seller to agreed-upon descriptions. Await approval for
          transaction to start.
        </p>
      </div>
    );
  }
  if (userRole === 'buyer' && order?.status === 'PENDING')
    return (
      <section className="mt-5 rounded-xl border-2 border-gray-200 bg-[#E6E6E6] p-5">
        <div className="mb-5">
          <h1 className="mb-4 text-2xl font-semibold text-gray-900 font-inter">Escrow Agreement</h1>

          <p className="mb-6 text-gray-600 leading-relaxed font-inter">
            This agreement confirms that the buyer, {order?.buyer?.firstName}{' '}
            {order?.buyer?.lastName}, has created an escrow transaction for {order?.transactionType}{' '}
            as described below. This transaction is governed by an escrow agreement automatically
            generated by PayAfta based on the details provided by both parties. Please review the
            agreement carefully before proceeding.
          </p>
        </div>

        <button
          onClick={handleDownload}
          className="mb-8 flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors"
        >
          <Download className="h-4 w-4" />
          Download Escrow Agreement (PDF)
        </button>

        <div className="mb-8 flex items-start gap-3">
          <Checkbox
            id="agreement"
            checked={isAgreed}
            onCheckedChange={(checked) => setIsAgreed(checked as boolean)}
            className="mt-1"
          />
          <label
            htmlFor="agreement"
            className="text-sm text-gray-700 leading-relaxed cursor-pointer"
          >
            I have read and agree to the Escrow Agreement. I understand that proceeding confirms my
            acceptance of the terms stated within.
          </label>
        </div>

        <div className="flex items-center gap-5">
          <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>
              <ReButton
                className="w-2/5 rounded-full"
                onClick={handleAcceptOrder}
                disabled={!isAgreed}
              >
                Accept Order
              </ReButton>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Transaction Confirmation</DialogTitle>
              </DialogHeader>
              <PaymentSuccessful label={'Transaction confirmed!'} />
              <DialogFooter>
                <ReButton onClick={handleConfirmTransaction} className="rounded-full">
                  Done
                </ReButton>
              </DialogFooter>
            </DialogContent>
          </Dialog>
          <ReButton
            className="w-2/5 rounded-full border-2 border-[#03045B] bg-white text-[#03045B] hover:bg-white"
            onClick={handleRejectOrder}
          >
            Reject
          </ReButton>
        </div>
      </section>
    );
}
